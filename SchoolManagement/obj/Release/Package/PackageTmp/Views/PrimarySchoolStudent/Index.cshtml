@*@model IEnumerable<SchoolManagement.Model.PrimarySchoolStudent>*@
@model PagedList.IPagedList<SchoolManagement.Model.PrimarySchoolStudent>
@{
    //Layout = "~/Views/Shared/_Layout.mobile.cshtml";
    ViewBag.Title = "Index";
    JobHustler.DAL.UnitOfWork work = new JobHustler.DAL.UnitOfWork();
}

@helper Truncate(string input, int length)
{
    if (input.Length <= length)
    { @input
    }
    else
    { @input.Substring(0, length)<text>...</text>
    }
}
<h4>LIST OF ALL STUDENTS</h4>

@*<p>
    @Html.ActionLink("Create New", "Create")
</p>*@
@using (Html.BeginForm())
{
    if (!(Request.IsAuthenticated && HttpContext.Current.User.IsInRole("Student") || (Request.IsAuthenticated && HttpContext.Current.User.IsInRole("Parent"))))
    {
    <fieldset>
        <legend>Search Box</legend>

        <table>

            <tr>

                <td>
                    <b>Approved:</b>
                </td>
                <td>
                    @Html.DropDownList("ApprovedString", SchoolManagement.Model.LevelDictionary.Approved)
                </td>
            </tr>

            <tr>

                <td>
                    <b>Find by Sex: </b>
                </td>
                <td>
                    @Html.DropDownList("SexString", SchoolManagement.Model.SexDictionary.SexDicoList)
                    &nbsp;

                </td>
            </tr>

            <tr>

                <tr>
                    <td>
                        <b>Find by Primary/Secondary:</b>
                    </td>
                    <td>
                        @Html.DropDownList("PrimarySec", SchoolManagement.Model.LevelDictionary.PrimarySecList)
                        &nbsp;
                    &nbsp;
                    </td>
                </tr>

                <td>
                    <b>Find by Class:</b>
                </td>
                <td>
                    @Html.DropDownList("LevelString", SchoolManagement.Model.LevelDictionary.LevelDicoList)
                    &nbsp;
                </td>
            </tr>




            <tr>

                <td>
                    <b>Class Arm:</b>
                </td>
                <td>
                    @Html.DropDownList("arm", new SelectList((System.Collections.IEnumerable)ViewData["arm"], "Value", "Text"))
                </td>
            </tr>




            <tr>

                <td>
                    <b>Find by name:</b>
                </td>
                <td>
                    @Html.TextBox("SearchString", ViewBag.CurrentFilter as string) &nbsp;
                </td>
            </tr>


            <tr>


                <td>
                    <b>Find by Student ID:</b>
                </td>
                <td>
                    @Html.TextBox("StudentIDString", ViewBag.CurrentFilter as string)
                    &nbsp;
                </td>
            </tr>
            @* <tr>
                <td>
                    <b>Find by Primary/Secondary:</b>
                </td>
                <td>
                    @Html.DropDownList("PrimarySec", SchoolManagement.Model.LevelDictionary.PrimarySecList)
                    &nbsp;
                    &nbsp;
                </td>
            </tr>*@


        </table>
        <input type="submit" value="Search" id="button" class="btn-primary" />
        <br />
    </fieldset>
   
    }


}
<hr />
@*<fieldset>
    <legend></legend>*@
<fieldset >
    <legend><b>@ViewBag.Count Record(s) Found</b>
</legend>
<table class="table table-striped table-hover table-bordered table-condensed">
    <tr>
        <th>
            @Html.ActionLink("Class", "Index")
            @* @Html.ActionLink("Class", "Index", new { sortOrder = ViewBag.ClassSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>


        <th>
            @Html.ActionLink("Name", "Index")
            @*  @Html.ActionLink("L.Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })*@
        </th>
     @*   <th>
            @Html.ActionLink("M.Name", "Index")
        </th>

        <th>
            @Html.ActionLink("F.Name", "Index")
        </th>*@

        @* <th>
            @Html.ActionLink("Enroll.", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>



        <th>D.O.B
        </th>*@

        <th>
            @Html.ActionLink("Sex", "Index", new { sortOrder = ViewBag.GenderSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>



        <th>App?
        </th>

        <th></th>
        <th></th>
        <th></th>



    </tr>

    @foreach (var item in Model)
    {
            
        <tr>
            <td>
                @* @Html.DisplayFor(modelItem => item.LevelType)*@
                @if (item.LevelType == null)
                {
                    <b>----</b>
                      
                }
                else
                {
                    @Html.DisplayFor(modelItem => item.LevelType)
                }
            </td>

            <td>
                @Truncate(item.LastName, 10), @Truncate(item.FirstName, 10)
                @* @Html.DisplayFor(modelItem => item.LastName)*@
            </td>
            @*<td>
                @Truncate(item.Middle, 10)
            
            </td>

            <td>
                @Truncate(item.FirstName, 10)
              
            </td>*@

            @*  <td>
                @Html.DisplayFor(modelItem => item.EnrollmentDate)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.DOB)
            </td>*@

            <td>
                @Html.DisplayFor(modelItem => item.Sex)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.IsApproved)
            </td>

            <td>
                @{
                var thePerson = work.PersonRepository.GetByID(item.PersonID);
                }
                @if (thePerson is SchoolManagement.Model.SecondarySchoolStudent)
                {
                    if (!(User.IsInRole("Student")) && (item.LevelType != "Graduated"))
                    {
                    
                      @Html.ActionLink("Edit", "Edit", "SecondarySchoolStudent", new { id = SchoolManagement.Models.Encript.EncryptString(item.PersonID.ToString(),true) }, null)
                    //@Html.ActionLink("Edit", "Edit", "SecondarySchoolStudent", new { id = item.PersonID }, null)
                    }
                }
                else
                {
                    if (!(User.IsInRole("Student")) && (item.LevelType != "Graduated"))
                    {
                           // @Html.ActionLink("Edit", "Edit", "SecondarySchoolStudent", new { id =  SchoolManagement.Models.EncodeDecode.Encode(item.PersonID.ToString()) }, null)
                     @Html.ActionLink("Edit", "Edit", new { id = SchoolManagement.Models.Encript.EncryptString(item.PersonID.ToString(),true)}, null)
                    //@Html.ActionLink("Edit", "Edit", new { id = item.PersonID })
                    }
                }
            </td>
            <td>
                @if (thePerson is SchoolManagement.Model.SecondarySchoolStudent)
                {
                    @Html.ActionLink("Details", "Details", "SecondarySchoolStudent", new { id = SchoolManagement.Models.Encript.EncryptString(item.PersonID.ToString(),true)}, null)
                      
                }
                else
                {
                    @Html.ActionLink("Details", "Details",new { id = SchoolManagement.Models.Encript.EncryptString(item.PersonID.ToString(),true)}, null)
                }
            </td>
            @if (!(item.IsApproved))
            {
                <td>
                    @Html.ActionLink("Delete", "Delete", new { id = SchoolManagement.Models.Encript.EncryptString(item.PersonID.ToString(),true)}, null)
                </td>
            }

        </tr>
    }
</table>
@*</fieldset>*@
<table>
    <tr>
        <td>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
            of @Model.PageCount
            &nbsp;
        </td>
        @if (Model.HasPreviousPage)
        {
            <td>
                @Html.ActionLink("<<", "Index", new { page = 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
            </td>
            @Html.Raw("&nbsp;")
            <td>
                @Html.ActionLink("< Prev", "Index", new { page = Model.PageNumber - 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
            </td>
        }
        else
        {
            <td><<
            </td>
            <td>
                @Html.Raw("&nbsp;")
                < Prev
            </td>
        }
        &nbsp;
    @if (Model.HasNextPage)
    {
        <td>
            @Html.ActionLink("Next >", "Index", new { page = Model.PageNumber + 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
        </td>
        <td>
            @Html.Raw("&nbsp;")
        </td>
        <td>
            @Html.ActionLink(">>", "Index", new { page = Model.PageCount, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter })
        </td>
    }
    else
    {
        <td>Next >
        </td>
        <td>
            @Html.Raw("&nbsp;")
        </td>
        <td>>>
        </td>
    }
    </tr>
</table>
    </fieldset>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
      //  $("#button").button();

    </script>
}
